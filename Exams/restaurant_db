CREATE DATABASE `restaurant_db`;
CREATE TABLE `waiters`
(
    `id`         INT AUTO_INCREMENT PRIMARY KEY,
    `first_name` VARCHAR(50) NOT NULL,
    `last_name`  VARCHAR(50) NOT NULL,
    `email`      VARCHAR(50) NOT NULL,
    `phone`      VARCHAR(50),
    `salary`     DECIMAL(10, 2)
);
CREATE TABLE `tables`
(
    `id`       INT AUTO_INCREMENT PRIMARY KEY,
    `floor`    INT NOT NULL,
    `reserved` TINYINT(1),
    `capacity` INT NOT NULL
);
CREATE TABLE `orders`
(
    `id`           INT AUTO_INCREMENT PRIMARY KEY,
    `table_id`     INT  NOT NULL,
    `waiter_id`    INT  NOT NULL,
    `order_time`   TIME NOT NULL,
    `payed_status` TINYINT(1),
    CONSTRAINT fk_to_waiters
        FOREIGN KEY (`waiter_id`)
            REFERENCES `waiters` (`id`),
    CONSTRAINT fk_to_tables
        FOREIGN KEY (`table_id`)
            REFERENCES `tables` (`id`)
);
CREATE TABLE `products`
(
    `id`    INT AUTO_INCREMENT PRIMARY KEY,
    `name`  VARCHAR(30) NOT NULL UNIQUE,
    `type`  VARCHAR(30) NOT NULL,
    `price` DECIMAL(10, 2)
);
CREATE TABLE `clients`
(
    `id`         INT AUTO_INCREMENT PRIMARY KEY,
    `first_name` VARCHAR(50) NOT NULL,
    `last_name`  VARCHAR(50) NOT NULL,
    `birthdate`  DATE        NOT NULL,
    `card`       VARCHAR(50),
    `review`     TEXT
);
CREATE TABLE `orders_products`
(
    `order_id`   INT,
    `product_id` INT,
    CONSTRAINT fk_order_product
        FOREIGN KEY (`order_id`)
            REFERENCES `orders` (`id`),
    CONSTRAINT fk_product_order
        FOREIGN KEY (`product_id`)
            REFERENCES `products` (`id`)
);
CREATE TABLE `orders_clients`
(
    `order_id`  INT,
    `client_id` INT,
    CONSTRAINT fk_client_order
        FOREIGN KEY (`order_id`)
            REFERENCES `orders` (`id`),
    CONSTRAINT fk_order_client
        FOREIGN KEY (`client_id`)
            REFERENCES `clients` (`id`)
);

INSERT INTO `products` (`name`, `type`, `price`)
SELECT (CONCAT(w.`last_name`, ' ', 'specialty')),
       ('Cocktail'),
       (CEIL(w.`salary` * 0.01))
FROM `waiters` AS w
WHERE w.`id` > 6;

UPDATE `orders` AS o
SET o.`table_id` = o.`table_id` - 1
WHERE o.`id` BETWEEN 12 AND 23;

DELETE w
FROM `waiters` AS w
         LEFT JOIN `orders` AS o ON w.`id` = o.`waiter_id`
WHERE o.`waiter_id` IS NULL;
# DELETE w FROM `waiters` AS w
# WHERE w.`id` NOT IN(SELECT o.`waiter_id` FROM `orders` AS o);

SELECT c.`id`,
       c.`first_name`,
       c.`last_name`,
       c.`birthdate`,
       c.`card`,
       c.`review`
FROM `clients` AS c
ORDER BY c.`birthdate` DESC, c.`id` DESC;

SELECT c.`first_name`,
       c.`last_name`,
       c.`birthdate`,
       c.`review`
FROM `clients` AS c
WHERE c.`card` IS NULL
  AND YEAR(c.`birthdate`) BETWEEN '1978' AND '1993'
ORDER BY c.`last_name` DESC, c.`id`
LIMIT 5;

SELECT CONCAT(w.`last_name`, w.`first_name`, LENGTH(w.`first_name`), 'Restaurant') AS `username`,
       REVERSE(SUBSTR(w.`email`, 2, 12))                                           AS `password`
FROM `waiters` AS w
WHERE w.`salary` IS NOT NULL
ORDER BY `password` DESC;

SELECT p.`id`, p.`name`, COUNT(op.`product_id`) AS `count`
FROM `products` AS p
         LEFT JOIN `orders_products` AS op ON p.`id` = op.`product_id`
GROUP BY p.`id`, p.`name`
HAVING count >= 5
ORDER BY `count` DESC, p.`name`;

SELECT t.`id`                AS `table_id`,
       t.`capacity`,
       COUNT(oc.`client_id`) AS `count_clients`,
       (CASE
            WHEN COUNT(oc.`client_id`) > t.`capacity` THEN 'Extra seats'
            WHEN COUNT(oc.`client_id`) = t.`capacity` THEN 'Full'
            WHEN COUNT(oc.`client_id`) < t.`capacity` THEN 'Free seats'
           END)
                             AS `availability`
FROM `tables` AS t
         JOIN `orders` AS o ON t.`id` = o.`table_id`
         JOIN `orders_clients` AS oc ON oc.`order_id` = o.`id`
WHERE t.`floor` = 1
GROUP BY o.`table_id`, t.`id`
ORDER BY t.`id` DESC;

DELIMITER **
CREATE FUNCTION udf_client_bill(full_name VARCHAR(50))
    RETURNS DECIMAL(19, 2)
    DETERMINISTIC
BEGIN
    DECLARE bill DECIMAL(19, 2);
    SET bill := (SELECT SUM(p.price)
                 FROM clients AS c
                          JOIN orders_clients AS oc ON c.id = oc.client_id
                          JOIN orders AS o ON oc.order_id = o.id
                          JOIN orders_products AS op ON o.id = op.order_id
                          JOIN products AS p ON op.product_id = p.id
                 WHERE CONCAT(c.first_name, ' ', last_name) = full_name);
    RETURN bill;
end **

CREATE PROCEDURE udp_happy_hour(type VARCHAR(50))
BEGIN
    START TRANSACTION;
    UPDATE products AS p1
    SET p1.price = p1.price * 0.8
    WHERE p1.type = type
      AND p1.price >= 10;
    COMMIT;
END **

DELIMITER ;
