create database `softUni_internet_movie`;
use `softUni_internet_movie`;
create table `genres`
(
    `id`   INT PRIMARY KEY AUTO_INCREMENT,
    `name` VARCHAR(50) NOT NULL UNIQUE
);
create table `countries`
(
    `id`        INT PRIMARY KEY AUTO_INCREMENT,
    `name`      VARCHAR(30) NOT NULL UNIQUE,
    `continent` VARCHAR(30) NOT NULL,
    `currency`  VARCHAR(5)  NOT NULL
);
create table `movies_additional_info`
(
    `id`            INT PRIMARY KEY AUTO_INCREMENT,
    `rating`        DECIMAL(10, 2) NOT NULL,
    `runtime`       INT            NOT NULL,
    `picture_url`   VARCHAR(80)    NOT NULL,
    `budget`        DECIMAL(10, 2),
    `release_date`  DATE           NOT NULL,
    `has_subtitles` TINYINT(1),
    `description`   TEXT
);

create table `movies`
(
    `id`            INT PRIMARY KEY AUTO_INCREMENT,
    `title`         VARCHAR(70) NOT NULL UNIQUE,
    `country_id`    INT         NOT NULL,
    `movie_info_id` INT         NOT NULL UNIQUE,
    CONSTRAINT fk_movies_countries
        FOREIGN KEY (`country_id`)
            REFERENCES `countries` (`id`),
    CONSTRAINT fk_to_info
        FOREIGN KEY (`movie_info_id`)
            REFERENCES `movies_additional_info` (`id`)
);
create table `genres_movies`
(
    `genre_id` INT,
    `movie_id` INT,
    CONSTRAINT fk_to_genres
        FOREIGN KEY (`genre_id`)
            REFERENCES `genres` (`id`),
    CONSTRAINT fk_genres_movies
        FOREIGN KEY (`movie_id`)
            REFERENCES `movies` (`id`)
);

create table `actors`
(
    `id`         INT PRIMARY KEY AUTO_INCREMENT,
    `first_name` VARCHAR(50) NOT NULL,
    `last_name`  VARCHAR(50) NOT NULL,
    `birthdate`  DATE        NOT NULL,
    `height`     INT,
    `awards`     INT,
    `country_id` INT         NOT NULL,
    CONSTRAINT fk_actors_countries
        FOREIGN KEY (`country_id`)
            REFERENCES `countries` (`id`)
);
create table `movies_actors`
(
    `movie_id` INT,
    `actor_id` INT,
    CONSTRAINT fk_actors_movies
        FOREIGN KEY (`movie_id`)
            REFERENCES `movies` (`id`),
    CONSTRAINT fk_movies_actors
        FOREIGN KEY (`actor_id`)
            REFERENCES `actors` (`id`)
);

INSERT INTO `actors`(`first_name`, `last_name`, `birthdate`, `height`, `awards`, `country_id`)
SELECT (REVERSE(a.`first_name`)),
       (REVERSE(a.`last_name`)),
       (a.`birthdate` - 2),
       (a.`height` + 10),
       (a.`country_id`),
       (3)
FROM `actors` as a
WHERE a.`id` <= 10;

UPDATE `movies_additional_info` AS i
SET i.`runtime` = i.`runtime` - 10
WHERE i.`id` BETWEEN 15 AND 25;

DELETE c
FROM `countries` AS c
         LEFT JOIN `movies` AS m ON c.`id` = m.`country_id`
WHERE `title` IS NULL;

SELECT c.`id`, c.`name`, c.`continent`, c.`currency`
FROM `countries` AS c
ORDER BY c.`currency` DESC, c.`id`;

SELECT mi.`id`,
       (SELECT m.`title` WHERE m.movie_info_id = mi.`id`) AS `title`,
       mi.`runtime`,
       mi.`budget`,
       mi.`release_date`
FROM `movies_additional_info` as mi
         INNER JOIN `movies` AS m ON mi.id = m.movie_info_id
WHERE YEAR(mi.`release_date`) BETWEEN 1996 AND 1999
ORDER BY mi.`runtime`, mi.`id`
LIMIT 20;

SELECT CONCAT(a.`first_name`, ' ', a.`last_name`)                         AS `full_name`,
       CONCAT(REVERSE(a.`last_name`), LENGTH(a.`last_name`), '@cast.com') AS `email`,
       (2022 - YEAR(a.`birthdate`))                                       AS `age`,
       a.`height`
FROM `actors` AS a
         LEFT JOIN `movies_actors` AS ma ON a.`id` = ma.`actor_id`
         LEFT JOIN `movies` AS m ON ma.`movie_id` = m.`id`
WHERE m.`id` IS NULL
ORDER BY a.height;

SELECT c.`name`, COUNT(m.`country_id`) AS movies_count
FROM `countries` AS c
         INNER JOIN `movies` AS m ON c.id = m.country_id
GROUP BY m.`country_id`, c.`name`
HAVING movies_count >= 7
ORDER BY c.name DESC;


SELECT m.title,
       (
           CASE
               WHEN mai.rating <= 4 THEN 'poor'
               WHEN mai.rating <= 7 THEN 'good'
               WHEN mai.rating > 7 THEN 'excellent'
#                        ELSE 'excellent'
               END
           )
           AS                                rating,
       IF(mai.has_subtitles, 'english', '-') subtitles,
       mai.budget
FROM movies_additional_info AS mai
         JOIN movies AS m ON mai.id = m.movie_info_id
ORDER BY mai.budget DESC;

DELIMITER **
CREATE FUNCTION udf_actor_history_movies_count(full_name VARCHAR(50))
    RETURNS INT
    DETERMINISTIC
BEGIN
    DECLARE movies_count INT;
    SET movies_count := (SELECT COUNT(g.name) movies
                         FROM actors a
                                  JOIN movies_actors ma on a.id = ma.actor_id
                                  JOIN genres_movies gm on ma.movie_id = gm.movie_id
                                  JOIN genres g on g.id = gm.genre_id
                         WHERE CONCAT(a.first_name, ' ', a.last_name) = full_name
                           AND g.name = 'History'
                         GROUP BY g.name);
    RETURN movies_count;
end **
SELECT udf_actor_history_movies_count('Stephan Lundberg')  AS 'history_movies';
SELECT udf_actor_history_movies_count('Jared Di Batista')  AS 'history_movies';
SELECT udf_actor_history_movies_count('Lucretia Binks')  AS 'history_movies';

DELIMITER $$
CREATE PROCEDURE `udp_award_movie`(`movie_title` VARCHAR(50))
BEGIN
    UPDATE actors a
        JOIN movies_actors ma on a.id = ma.actor_id
        JOIN movies m on m.id = ma.movie_id
    SET  a.awards = a.awards + 1
    WHERE m.title = movie_title;
END $$
DELIMITER ;

CALL udp_award_movie('Tea For Two');
CALL udp_award_movie('Miss You Can Do It');


